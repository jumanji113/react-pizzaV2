import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import qs from 'qs';
import { useNavigate, Link } from 'react-router-dom';

import Categories from '../components/Categories';
import Pagination from '../components/Pagination';
import PizzaBlock from '../components/PizzaBlock';
import Skeleton from '../components/PizzaBlock/Skeleton';
import Sort, { sortList } from '../components/Sort';
import {
    selectedFilter,
    setCategoryId,
    setCurrentPage,
    setFilters,
} from '../redux/slices/filterSlice';
import { useRef } from 'react';
import { fetchPizzas, selectPizzaData } from '../redux/slices/pizzaSlice';

const Home = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const isSearch = useRef(false);
    const isMounted = useRef(false);

    const { categoryId, sort, currentPage, searchValue } = useSelector(selectedFilter); //–∏–∑ —Ä–µ–¥–∞–∫—Å–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–µ–π—Ç—ã
    const { items, status } = useSelector(selectPizzaData); //–∏–∑ —Ä–µ–¥–∞–∫—Å–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–µ–π—Ç—ã
    const sortType = sort.sortProperty;

    const onChangeCategory = React.useCallback((idx) => {
        dispatch(setCategoryId(idx));
    }, []);
    //—Ñ—É–Ω–∫—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–∏—Å–ø–∞—Ç—á–∏–º –∏–∑ —Å–ª–∞–π—Å–∞

    const onChangePage = (number) => {
        dispatch(setCurrentPage(number));
    }; // –∞–Ω–∞–ª–æ–≥–∏—è –∫–∞–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

    const getPizzas = async () => {
        //–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥, –ø–æ–ª—É—á–∞–µ–º —Å –±—ç–∫–∞ –¥–∞–Ω–Ω—ã–µ // —Å—Ç–µ–π—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–¥–∏–≤—ã–π

        const order = sortType.includes('-') ? 'asc' : 'desc'; // –µ—Å–ª–∏ —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç - —Ç–æ –ø–æ-—É–±—ã–≤–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const sortBy = sortType.replace('-', ''); // —É–±–∏—Ä–∞–µ–º -
        const category = categoryId > 0 ? `category=${categoryId}` : '';
        const search = searchValue ? `&search=${searchValue}` : '';

        dispatch(
            fetchPizzas({
                order,
                sortBy,
                category,
                search,
                currentPage,
            }),
        );
    };

    // –≤—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –ø–æ–º–æ—â—å—é qs - –ø–∞—Ä—Å–∏–Ω–≥ –Ω—É–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    useEffect(() => {
        if (isMounted.current) {
            const queryString = qs.stringify({
                sortProperty: sort.sortProperty,
                categoryId,
                currentPage,
            });
            navigate(`?${queryString}`);
        }
        isMounted.current = true;
    }, [categoryId, sort.sortProperty, currentPage]);

    // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä , —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ—è–º –≤ —Ä–µ–¥—É–∫—Å
    useEffect(() => {
        if (window.location.search) {
            const params = qs.parse(window.location.search.substring(1)); // –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä—Å—è—Ç—å—Å—è –≤ –æ–±—ä–µ–∫—Ç

            const sort = sortList.find((obj) => obj.sortProperty === params.sortProperty);

            dispatch(
                setFilters({
                    ...params,
                    sort,
                }),
            );
            isSearch.current = true;
        }
    }, []);

    // –µ—Å–ª–∏ –±—ã–ª 1 —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
    useEffect(() => {
        window.scrollTo(0, 0);
        if (!isSearch.current) {
            getPizzas();
        }

        isSearch.current = false;
    }, [categoryId, sortType, searchValue, currentPage]);

    const pizzas = items.map((obj) => (
        <Link to={`/pizza/${obj.id}`}>
            <PizzaBlock {...obj} />
        </Link>
    )); //–º–∞—Å—Å–∏–≤ –ø–∏—Ü—Ü —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –º—ç–ø , –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –¥–∂—Å—Ö —ç–ª–µ–º–µ–Ω—Ç
    const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />); // —Å–∫–µ–ª–µ—Ç–æ–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, —Å –ø–æ–º–æ—â—å—é –ø—É—Å—Ç–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

    return (
        <div className="container">
            <div className="content__top">
                <Categories value={categoryId} onChangeCategory={onChangeCategory} />
                <Sort />
            </div>
            <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
            {status === 'error' ? (
                <div className="content__error-info">
                    <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞üòï</h2>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Ü—Ü—ã!</p>
                </div>
            ) : (
                <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
            )}
            <Pagination currentPage={currentPage} onChangePage={onChangePage} />
        </div>
    );
};

export default Home;
